const form = document.getElementsByClassName("my-form");
const loader = document.getElementById('loader');
const socket = new WebSocket('ws://localhost:5000/long-process');

document.getElementById('myForm').addEventListener('submit', function(event) {
    event.preventDefault(); 
    loader.style.display = 'block'; 
    socket.send(JSON.stringify({ status: 'form_submitted' }));            
    this.submit();
});

socket.onopen = function(event) {
    loader.style.display = 'block';
};

socket.onmessage = function(event) {
const data = JSON.parse(event.data);
console.log('Received message:', data);

if (data.status === 'complete') {
    loader.style.display = 'none';
}
};

socket.onerror = function(error) {
console.error('WebSocket error:', error);
};

@sockets.route('/long-process')
def long_process(ws):
    for i in range(1, 11):
        time.sleep(1)
        ws.send(json.dumps({'status': 'progress', 'message': f'Processing step {i}/10...'}))
    ws.send(json.dumps({'status': 'complete', 'message': 'Processing complete.'}))


server = pywsgi.WSGIServer(('localhost', 5000), app, handler_class=WebSocketHandler)
print("Server running at http://localhost:5000")
server.serve_forever()


#loader {
  display: none;
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  z-index: 9999;
}




for model in algo:
        if model == "Generative Adversarial Networks(GAN)":
            subplot = list()
            gan_model = GAN(dataset)
            gan_model.train(epochs=50, batch_size=32)
            gan_res = gan_model.test()
            selected_algo[model] = gan_res
            subplot.append(plot_model.gen_auc_plot(gan_res))
            subplot.append(plot_model.gen_confusion_matrix(gan_res))
            plots[model] = subplot
        
        elif model == "Local Outlier Factor(LOF)":
            subplot = list()
            lof_model = Lof(dataset)
            lof_res = lof_model.train_test()
            selected_algo[model] = lof_res
            subplot.append(plot_model.gen_auc_plot(lof_res))
            subplot.append(plot_model.gen_confusion_matrix(lof_res))
            plots[model] = subplot

        elif model == "Isolation Forest(IForest)":
            subplot = list()
            iforest_model = iForest(dataset)
            iforest_res = iforest_model.train_test()
            selected_algo[model] = iforest_res
            subplot.append(plot_model.gen_auc_plot(iforest_res))
            subplot.append(plot_model.gen_confusion_matrix(iforest_res))
            plots[model] = subplot

        elif model == "AutoEncoders":
            subplot = list()
            auto_model = AutoEncoder(dataset)
            auto_model.build_model()
            auto_res = auto_model.train_test(epochs=50, batch_size=64)
            selected_algo[model] = auto_res
            subplot.append(plot_model.gen_auc_plot(auto_res))
            subplot.append(plot_model.gen_confusion_matrix(auto_res))
            plots[model] = subplot

        elif model == "DevNet":
            subplot = list()
            devnet_model = Devnet(dataset)
            devnet_res = devnet_model.train_test(epochs=10)
            selected_algo[model] = devnet_res
            subplot.append(plot_model.gen_auc_plot(devnet_res))
            subplot.append(plot_model.gen_confusion_matrix(devnet_res))
            plots[model] = subplot

        elif model == "Elliptic Envelope":
            subplot = list()
            env_model = ellipticEnvelope(dataset)
            env_res = env_model.train_test()
            selected_algo[model] = env_res
            subplot.append(plot_model.gen_auc_plot(env_res))
            subplot.append(plot_model.gen_confusion_matrix(env_res))
            plots[model] = subplot

        elif model == "DAGMM":
            subplot = list()
            dagmm_model = Dagmm1(dataset)
            dagmm_res = dagmm_model.train_test()
            selected_algo[model] = dagmm_res
            subplot.append(plot_model.gen_auc_plot(dagmm_res))
            subplot.append(plot_model.gen_confusion_matrix(dagmm_res))
            plots[model] = subplot

        elif model == "Quantile Regression":
            subplot = list()
            qreg_model = QReg(dataset)
            qreg_model.build_model()
            qreg_res = qreg_model.train_test()
            selected_algo[model] = qreg_res
            subplot.append(plot_model.gen_auc_plot(qreg_res))
            subplot.append(plot_model.gen_confusion_matrix(qreg_res))
            plots[model] = subplot

        elif model == "Long Short Term Memory(LSTM)":
            subplot = list()
            lstm_model = Lstm(dataset)
            lstm_model.build_model()
            lstm_res = lstm_model.train_test(epochs=50, batch_size=64)
            selected_algo[model] = lstm_res
            subplot.append(plot_model.gen_auc_plot(lstm_res))
            subplot.append(plot_model.gen_confusion_matrix(lstm_res))
            plots[model] = subplot

        elif model == "MGBTAI":
            subplot = list()
            mgbtai_model = MGBTAI(dataset)
            mgbtai_model.train()
            mgbtai_res = mgbtai_model.test()
            selected_algo[model] = mgbtai_res
            subplot.append(plot_model.gen_auc_plot(mgbtai_res))
            subplot.append(plot_model.gen_confusion_matrix(mgbtai_res))
            plots[model] = subplot

        elif model == "DBTAI":
            subplot = list()
            dbtai_model = DBTAI(dataset)
            dbtai_model.train()
            dbtai_res = dbtai_model.test()
            selected_algo[model] = dbtai_res
            subplot.append(plot_model.gen_auc_plot(dbtai_res))
            subplot.append(plot_model.gen_confusion_matrix(dbtai_res))
            plots[model] = subplot
        
        else:
            return render_template("visualize.html", error="Some error occured", algos=ALGO)
        



.navbar {
  color: white; /* Set the color of the text inside the navbar to white */
}

.navbar a {
  color: white; /* Set the color of the links inside the navbar to white */
}

.header {
  color: white;
  /* Set the color of the text to white */
}
.container {
  color: white; /* Set the color of the text inside the container to white */
}

.container h1 {
  color: white; /* Set the color of the h1 elements inside the container to white */
}

.form-item {
  margin-bottom: 20px;
}
.card {
  --background: linear-gradient(to left, #6c0e40 0%, #041a87 100%);
  width: 230px;
  height: 265px;
  padding: 5px;
  border-radius: 1rem;
  box-shadow: 0 4px 8px rgba(161, 15, 15, 2);
  transition: transform 0.3s, box-shadow 0.3s;
  overflow: visible;
  background: #f7ba2b;
  background: var(--background);
  position: relative;
  z-index: 1;
  
 }
 .nav-links {
  display: flex; /* Use flexbox to align items */
  gap: 10px; /* Add gap between buttons */
  vertical-align: middle;
  align-items: center;
  
}
 .nav-link {
  margin-top: 20px;
  display: inline-block;
  padding: 10px 20px; /* Adjust padding to increase button size */
  /* background-color: #e0b010; Set button background color */
  color: #fff; /* Set button text color */
  text-decoration: none; /* Remove default underline */
  border: none; /* Remove border */
  border-radius: 5px; /* Add border radius for rounded corners */
  transition: background-color 0.3s; /* Smooth transition for hover effect */
  margin-right: 20px; /* Add some margin between buttons */
  text-align: center; /* Center the text horizontally */
  width: 150px; /* Set fixed width for the buttons */
  height: 60px; /* Set fixed height for the buttons */
  line-height: 40px; /* Align text vertically in the center */

  
}

.nav-link:hover {
  background-color: #373738; /* Change background color on hover */
}

 /* .card::after {
  position: absolute;
  content: "";
  top: 30px;
  left: 0;
  right: 0;
  z-index: -1;
  height: 100%;
  width: 100%;
  transform: scale(0.8);
  filter: blur(25px);
  background: #f7ba2b;
  background: var(--background);
  transition: opacity .5s;
 } */
 .card-container {
  display: flex;
  justify-content: center; /* Horizontally center the cards */
  align-items: center; /* Vertically center the cards */
  gap: 60px;
}
  .card-info {
  --color: #181818;
  background: var(--color);
  color: var(--color);
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  height: 100%;
  overflow: visible;
  border-radius: .7rem;
 
  text-align: center; /* Center the text horizontally */
}
.card:hover {
  transform: scale(1.1); /* Enlarge the card being hovered */
  /* transform: translateY(-5px); */

  box-shadow: 0 8px 16px rgba(161, 15, 15, 2); /* Make the shadow more prominent */
}
.card:hover .title {
  color: #2eb7f2;
}
 
 
.card .title {
  font-weight: bold;
  letter-spacing: .1em;
  color:white;
 }

 /*Hover*/
 /* .card:hover::after {
  opacity: 0;
 }
 
 .card:hover .card-info {
  color: #f7ba2b;
  transition: color 1s;
 } */

/* Assuming your video element has the id 'background-video' */


button {
  position: relative;
	@@ -226,11 +362,11 @@ button {
  font-family: inherit;
&.learn-more {
    font-weight: 600;
    color: white;
    text-transform: uppercase;
    padding: 1.25em 2em;
    background: #fff0f0;
    border: 2px solid #f2f0f1;
    border-radius: 0.75em;
    transform-style: preserve-3d;
    transition: transform 150ms cubic-bezier(0, 0, 0.58, 1), background 150ms cubic-bezier(0, 0, 0.58, 1);
	@@ -243,9 +379,9 @@ button {
      left: 0;
      right: 0;
      bottom: 0;
      background: white;
      border-radius: inherit;
      box-shadow: 0 0 0 2px #f8f6f7, 0 0.625em 0 0 #ffe3e2;
      transform: translate3d(0, 0.75em, -1em);
      transition: transform 150ms cubic-bezier(0, 0, 0.58, 1), box-shadow 150ms cubic-bezier(0, 0, 0.58, 1);
    }
	@@ -261,7 +397,7 @@ button {
      background: #ffe9e9;
      transform: translate(0em, 0.75em);
      &::before {
        box-shadow: 0 0 0 2px rgb(252, 248, 249), 0 0 #ffe3e2;
        transform: translate3d(0, 0, -1em);
      }
    }


<video autoplay muted loop id="background-video">
        <source src="{{ url_for('static', filename='video1.mp4') }}" type="video/mp4">
        Your browser does not support the video tag.
    </video> -->
    <!-- <div class="card-container" >
        <div class="card">
            <div class="card-info">
                <h3 class="title">What is Anomaly Detection?</h3>
            </div>
        </div>
        
        <div class="card">
            <div class="card-info">
                <h3 class="title">More About Our Models</h3>
            </div>
        </div>
        
        <div class="card">
            <div class="card-info">
                <a href="/input_form"><h3 class="title">Result Visualization</h3></a>
            </div>
        </div>
        
        <div class="card">
            <div class="card-info">
                <a href="/visualizedata"><h3 class="title">Data Visualization</h3></a>
            </div>
        </div>
    </div>

select,
input[type="file"],
button {
  width: calc(100% - 20px); 
  padding: 15px; 
  margin-bottom: 15px; 
  border: 1px solid #ccc;
  border-radius: 4px;
  box-sizing: border-box;
}

button {
  position: relative;
  display: inline-block;
  cursor: pointer;
  outline: none;
  border: 0;
  vertical-align: middle;
  text-decoration: none;
  font-size: inherit;
  font-family: inherit;
&.learn-more {
    font-weight: 600;
    color: #382b22;
    text-transform: uppercase;
    padding: 1.25em 2em;
    background: #fff0f0;
    border: 2px solid #b18597;
    border-radius: 0.75em;
    transform-style: preserve-3d;
    transition: transform 150ms cubic-bezier(0, 0, 0.58, 1), background 150ms cubic-bezier(0, 0, 0.58, 1);
    &::before {
      position: absolute;
      content: '';
      width: 100%;
      height: 100%;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: #f9c4d2;
      border-radius: inherit;
      box-shadow: 0 0 0 2px #b18597, 0 0.625em 0 0 #ffe3e2;
      transform: translate3d(0, 0.75em, -1em);
      transition: transform 150ms cubic-bezier(0, 0, 0.58, 1), box-shadow 150ms cubic-bezier(0, 0, 0.58, 1);
    }
    &:hover {
      background: #ffe9e9;
      transform: translate(0, 0.25em);
      &::before {
        box-shadow: 0 0 0 2px #b18597, 0 0.5em 0 0 #ffe3e2;
        transform: translate3d(0, 0.5em, -1em);
      }
    }
    &:active {
      background: #ffe9e9;
      transform: translate(0em, 0.75em);
      &::before {
        box-shadow: 0 0 0 2px #b18597, 0 0 #ffe3e2;
        transform: translate3d(0, 0, -1em);
      }
    }
  }
}